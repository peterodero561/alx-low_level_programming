!<arch>
0-isupper.c/    0           0     0     644     295       `
/*
 * File: 0-isupper.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _isupper - determines whether a givenn character
 * is capital alphabet letter
 * @c: is the character to be cheacked
 *
 * Return: Always zero
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	return (0);
}

0-memset.c/     0           0     0     644     430       `
/*
 * File: 0-memset.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _memset - fills a given No of bytes of memory with a constant byte
 * @s: adress that points to memory
 * @n: No of bytes to be filled
 * @b: the character to fill the memory adress
 *
 * Return: the pointer to the memory area
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     390       `
/*
 * File: 0-strcat.c
 * Auth: Peter Odero
 */

#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: a string
 * @src: another string
 *
 * Return: concatenated string
 */

char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	for (i = 0; dest[i] != '\0'; i++)
	{}
	for (j = 0 ; src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
1-isdigit.c/    0           0     0     644     281       `
/*
 * File: 1-isdigit.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _isdigit - Determines whether a given charachter is a number  or not
 * @c: is the character ti be checked
 *
 * Return: Always 0
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	return (0);
}

1-memcpy.c/     0           0     0     644     405       `
/*
 * File: 1-memcpy.c
 * Auth: Peter.c
 */

#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: memory area to copy to
 * @src: memory area to copy from
 * @n: No of bytes to copy from the memory area
 *
 * Return: new memory area dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     448       `
/*
 * File: 1-strncat
 * Auth: Peter
 */

#include "main.h"

/**
 * _strncat - concatenates two stringsi using a given number of bytes
 * @dest: one string
 * @src: another string
 * @n: number of bytes to be concidered
 *
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	for (i = 0; dest[i] != '\0'; i++)
	{}
	for (j = 0; src[j] != '\0' && n > 0; j++)
	{
		dest[i] = src[j];
		i++;
		n--;
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     516       `
/*
 * file: 100-atoi.c
 * Auth: peter
 */
#include "main.h"
/**
 * _atoi - Convert a string to integer.
 * @s: char array string
 *
 * Return: first integer found in string
 */

int _atoi(char *s)
{
	int i;
	int h, p;

	h = 0;
	p = -1;
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			p *= -1;

		if (s[i] > 47 && s[i] < 58)
		{
			if (h < 0)
				h = (h * 10) - (s[i] - '0');
			else
				h = (s[i] - '0') * -1;

			if (s[i + 1] < 48 || s[i + 1] > 57)
				break;
		}
	}
	if (p < 0)
		h *= -1;

	return (h);
}
2-strchr.c/     0           0     0     644     378       `
/*
 * File: 2-strchr.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: string to be checked
 * @c: character we're looking for
 *
 * Return: pointer to the first occurence of @c
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		if (*(s + i)  == c)
			return ((s + i));
	}
	return ((s + i));
}
2-strlen.c/     0           0     0     644     260       `
/*
 * File: 2-strlen.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _strlen - retruns the length of a string
 * @s: is the string to be checked
 * Return: Always 0
 */

int _strlen(char *s)
{
	int i;

	i = 0;
	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     410       `
/*
 * File: 2-strncpy.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: string to copy to
 * @src: string to copy from
 * @n: number of strings to copy from @src
 *
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && n > i; i++)
	{
		dest[i] = src[i];
	}
	while (n > i)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     286       `
/*
 * File: 3-islower
 * Auth: Peter
 */

#include "main.h"

/**
 * _islower - determines whether a give character is capital or small
 * letter
 * @c: cahacter to be checked
 *
 * Return: Always 0
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     266       `
/*
 * File: 3-puts.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _puts - prints a string
 * @str: string to be printed
 *
 * Return: Always 0
 */

void _puts(char *str)
{
	int i;

	i = 0;
	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     412       `
/*
 * File: 3-strcmp
 * Auth: Peter
 */

#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: one of the strings
 * @s2: the other string
 *
 * Return: 0 if strings are alike, + No if s1 > s2 and - No if s1 < s2
 */

int _strcmp(char *s1, char *s2)
{
	int i;
	int j;

	for (i = 0, j = 0; s1[i] != '\0' || s2[j] != '\0'; i++, j++)
	{
		if (s1[i] != s2[j])
			return (s1[i] - s2[j]);
	}
	return (0);
}
3-strspn.c/     0           0     0     644     468       `
/*
 * File: 3-strspn.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _strspn - gets the length of a prefix substing
 * @s: string with the prefix
 * @accept: string with the bytes
 *
 * Return: No of bytes in the inital segment of @s
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int j;
	int i;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		j = 0;
		if (*(accept + j) == '\0')
			break;
		while (*(accept + j) == *(s + i))
		{
			j++;
		}
	}
	return (j);
}
4-isalpha.c/    0           0     0     644     311       `
/*
 * File: 4-isalpha.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _isalpha - Detrmines whether a given character is an alphabet
 * @c: character given
 *
 * Return: Always 0
 */

int _isalpha(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     576       `
/*
 * File: 4-strpbrk.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _strpbrk - searches a string for a set of bytes
 * @s: string to search to saerch in
 * @accept: characters to search in @s
 *
 * Return: pointer to bytes @s that matches one of the bytes in accept
 * or NULL if no search byte is found
 */

char *_strpbrk(char *s, char *accept)
{
	int i;
	int j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
			{
				return (s + i);
			}
		}
	}
	if (*(s + i) == '\0')
		return (0);
	return (s);
}
5-strstr.c/     0           0     0     644     590       `
/*
 * File: 5-strstr.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: string being be checked
 * @needle: string that is being checked in @haystack
 *
 * Return: pointer to the beggining of the located substring
 * or NULL if the string is not found
 */

char *_strstr(char *haystack, char *needle)
{
	int i;
	int j;

	for (i = 0; *(needle + i) != '\0'; i++)
	{
		for (j = 0; *(haystack + j) != '\0'; j++)
		{
			if (*(needle + i) == *(haystack + j))
				return (needle + i);
		}
	}
	if (*(haystack + j) == '\0')
		return (0);
	return (needle);
}
6-abs.c/        0           0     0     644     272       `
/*
 * File: 6-abs.c
 * Auth: Peter
 */

#include "main.h"

/**
 * _abs - converts a given integer to its absolute value
 * @c: number to be converted
 *
 * Return: Always 0
 */

int _abs(int c)
{
	int num;

	if (c < 0)
	{
		num = c * -1;
		return (num);
	}
	return (c);
}
9-strcpy.c/     0           0     0     644     394       `
/*
 * File: 9-strcpy.c
 * Auth: Peter
 */

#include "main.h"

/**
 * *_strcpy - copies a string including the terminal null byte
 * @dest: pointer of buffer
 * @src: string to be copied
 *
 * Return: Always 0
 */

char *_strcpy(char *dest, char *src)
{
	int i;
	int j;

	for (i = 0; src[i] != '\0'; i++)
	{}
	for (j = 0; j < i; j++)
	{
		dest[j] = src[j];
	}
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

